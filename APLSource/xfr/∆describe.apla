'  This code is used to transfer workspaces to/from host files.',(⎕UCS 13),'This be can useful when taking backups or going back to a previous',(⎕UCS 13),'incompatible version of an APL. Because it can apply some code',(⎕UCS 13),'translation it can also be used to go between APLs.',(⎕UCS 13 13),'SIMPLEST USAGE',(⎕UCS 13 13),'- To send to the host:',(⎕UCS 13),'    )xload YOURWS',(⎕UCS 13),'    )pcopy XFRCODE (this workspace)',(⎕UCS 13),'    xfr.∆xfrto ''tohost\filename'' ',(⎕UCS 13),'    (or as a user command:)',(⎕UCS 13),'    ]out  tohost\filename',(⎕UCS 13 13),'- To retrieve the objects in a file on the host:',(⎕UCS 13),'    )load XFRCODE (this workspace)',(⎕UCS 13),'    xfr.∆xfrfrom ''hostpath\filename.ext''',(⎕UCS 13),'    (or as a user command:)',(⎕UCS 13),'    ]in  hostpath\filename.ext',(⎕UCS 13 13 13),'ADVANCED USAGE',(⎕UCS 13 13),'There are several switches (aka modifiers). Switches are keywords preceded',(⎕UCS 13),'by a delimiter, e.g. ''/''. In the following text ''/'' is used as an example.',(⎕UCS 13),'Your installation may use a different delimiter. User commands often use',(⎕UCS 13),'dash (-) instead.',(⎕UCS 13 13),'For example, if you want to transfer file <MFfile> instead of the current ',(⎕UCS 13),'workspace, use switch ''/file=MFile'' (all programs reside in namespace ''xfr''):',(⎕UCS 13 13),'  ∆xfrto ''tohost\filename /file=MFfile'' ⍝ local file name format',(⎕UCS 13),'varies but use \ instead of / for Unix pathnames to avoid conflicts',(⎕UCS 13),'with switches'' delimiter if / is the delimiter.  ',(⎕UCS 13 13),'To transfer specific components use',(⎕UCS 13),'  ∆xfrto ''localfile /file=myfile /range=3,45'' ⍝ cpts 3 to 45',(⎕UCS 13 13),'The access matrix is always transferred unless access is restricted. If',(⎕UCS 13),'a lock is required add the switch /lock. ',(⎕UCS 13 13),'To transfer specific objects in the ws use the /obj switch:',(⎕UCS 13),'  ∆xfrto ''file /obj=a,bc,def''',(⎕UCS 13 13),'To retrieve a component file do',(⎕UCS 13),'  ∆xfrfrom ''hostpath\filename /file=myfile''',(⎕UCS 13),'possibly adding switches /range and /noam if needed. The file will',(⎕UCS 13),'be created if it does not already exist. New items will be appended.',(⎕UCS 13 13),'Note that you must use the /f switch if it''s a file even though the',(⎕UCS 13),'extension is .x?f otherwise all the components will be defined in the',(⎕UCS 13),'workspace in variables named something like CPTxxx.',(⎕UCS 13 13),'To replace objects or components use the /replace switch.',(⎕UCS 13 13),'If you only wish to see the names that will be produced use the /list',(⎕UCS 13),'switch.',(⎕UCS 13 13 13),'⎕AV MAPPING and CODE TRANSLATION',(⎕UCS 13 13),'  The program will perform ⎕av mapping automatically. To get the',(⎕UCS 13),'program to also translate the code use switch /trans. With /trans=2',(⎕UCS 13),'you also get the ⎕av map in variable ∆AV. This is useful if there is a',(⎕UCS 13),'lot of ⎕AV[...] in the code. They will be changed to ∆AV[...].',(⎕UCS 13 13),'  Some of the programs can be used by themselves. For example, if you',(⎕UCS 13),'wish to keep the result of the transfer you can assign it to a',(⎕UCS 13),'variable as in',(⎕UCS 13),'      toxfr←∆xfr namelist',(⎕UCS 13 13),'and use your favorite program to transfer that variable. Note that',(⎕UCS 13),'translation problems are more likely to occur with this method.',(⎕UCS 13 13 13),'TECHNICAL DETAILS',(⎕UCS 13 13),'  The transfer file extension is ''x?w'' (ws) or ''x?f'' (files) where ''?''',(⎕UCS 13),'is ''u'' for SAX, ''s'' for APL2000, ''d'' for Dyalog, ''m'' for SAM, ''p''',(⎕UCS 13),'for AplX and ''i'' for IBM''s APL2.',(⎕UCS 13 13),'  This extension will be ADDED by the <∆xfrto> program and USED by the',(⎕UCS 13),'<∆xfrfrom> program. This extension usage can be overridden by the',(⎕UCS 13),'/apl= switch as in',(⎕UCS 13 13),'      ∆xfrfrom ''myxfr.file /apl=DYW''',(⎕UCS 13 13),'Possible /apl= values are SAM (SHARP APL mainframe), SAX (SHARP APL',(⎕UCS 13),'Unix), DYW (Dyalog for Windows), APX (AplX), A2K (APL2000) and AP2',(⎕UCS 13),'(APL2).',(⎕UCS 13 13),'  <∆xfrto> dumps all objects to file without translation. Those',(⎕UCS 13),'include all variable types (Character, Numeric, Mixed, Enclosed/boxed,',(⎕UCS 13),'Packages and, within those, Undefined) and Functions/Operators.',(⎕UCS 13),'Packages are transformed into namespaces under Dyalog, overlays under',(⎕UCS 13),'APLX and into nested structures for APL+Win. Special programs are included',(⎕UCS 13),'to handle these in the transfer workspace in some APLs. They all start ',(⎕UCS 13),'with the capital letter ''P''. The code will also use those names ',(⎕UCS 13),'instead of ⎕pnames where appropriate. ',(⎕UCS 13 13),'  When using /objs with ∆xfrfrom, the value supplied must be one of',(⎕UCS 13),'  p: package (namespaces)',(⎕UCS 13),'  m: mixed',(⎕UCS 13),'  e: enclosed',(⎕UCS 13),'  n: numeric',(⎕UCS 13),'  c: character',(⎕UCS 13),'  f: function',(⎕UCS 13),'  o: operator',(⎕UCS 13 13),'  <∆xfrfrom> reads a file, maps the ⎕av if from a different APL and',(⎕UCS 13),'applies code translation if /trans=1 (or 2) is supplied with the',(⎕UCS 13),'argument.',(⎕UCS 13 13),'  All programs start with a delta. For Dyalog APL they all reside in',(⎕UCS 13),'the ''xfr'' namespace.  Code was written in "common" APL. The internal',(⎕UCS 13),'names (locals) are unusual to minimize name conflicts. There is a',(⎕UCS 13),'different workspace for each APL version. This version uses control ',(⎕UCS 13),'structures as all APLs use them nowadays.',(⎕UCS 13 13),'  The programs account for Dyalog''s suite of non-standard object like',(⎕UCS 13),'⎕NULL, ⎕ORs and Classes. These have no equivalent on other APLs but',(⎕UCS 13),'are accepted. ',(⎕UCS 13 13),'  Switches can be shortened to a short non-ambiguous form. The actual',(⎕UCS 13),'switches are (*=∆xfrfrom only, CAPITALS=minimum length):',(⎕UCS 13),' /Apl*, /File=, /List*, /Noam, /Objs=, /RAnge=, /REplace*, /Trans=*',(⎕UCS 13),' /Lock=',(⎕UCS 13 13 13),'EXAMPLES',(⎕UCS 13 13),'     ∆xfrto   ''myexportfile /file=myaplfile /range=100 999 ''',(⎕UCS 13),'     ∆xfrfrom ''yourfile /objs=fo  /trans'' ⍝ apply translation',(⎕UCS 13),'     ∆xfrfrom ''x.xuw /list''               ⍝ only list objects',(⎕UCS 13),'     ∆xfrfrom ''fx.xuw /f/n''               ⍝ file, no access matrix',(⎕UCS 13 13),'     Program <F> will look like this when translated',(⎕UCS 13),'      SAX                      Dyalog                   APL 2000',(⎕UCS 13),'    ∇ F; ⎕trap;⎕ec           ∇ F; ⎕TRAP;ec_           ∇ F; ⎕ELX;ec_',(⎕UCS 13),' [1]  ⍵←2 ⎕ws 2           [1]  w_←(⊃⎕SI)           [1]  w_←⎕SI',(⎕UCS 13),' [2]  a ⎕replace t        [2]  a ⎕FREPLACE t       [2]  a ⎕FREPLACE t',(⎕UCS 13),'    ∇                        ∇                        ∇',(⎕UCS 13 13 13),'CODE TRANSLATION',(⎕UCS 13 13),'  To change the behaviour of the translation edit variable',(⎕UCS 13),'''∆equivalence'' under the APL section desired. Each section starts with',(⎕UCS 13),'a colon followed by the APL vendor code (SAX, DYW or A2K) as in',(⎕UCS 13),''':SAX''. Each non empty line after is made out of 2 strings separated',(⎕UCS 13),'by ''%''. The first one is the string to replace, the second its',(⎕UCS 13),'replacement. Strings surrounded by " are the ⎕av value instead. ⎕names',(⎕UCS 13),'are case independent and treated syntactically but others are not.',(⎕UCS 13 13 13),'RESTRICTIONS',(⎕UCS 13 13),'  The usual ws full problems can be encountered. If possible increase',(⎕UCS 13),'ws size to solve this problem. Many characters have no equivalent in',(⎕UCS 13),'other APLs. They are still mapped to a character when read from the',(⎕UCS 13),'file. If a program cannot be fixed in the workspace (possibly because',(⎕UCS 13),'of an invalid header) a variable with the same name preceded by a ''⍙''',(⎕UCS 13),'contains the offending code. For example, if program <F> cannot be',(⎕UCS 13),'fixed then variable ''⍙F'' will contain the (translated) code.',(⎕UCS 13 13),'  Windows objects are not transferred. Nor are instances or other exotic',(⎕UCS 13),'objects.',(⎕UCS 13 13 13),'CAVEAT',(⎕UCS 13),'  ',(⎕UCS 13),'  The code tries to serialize the namespaces and interfaces before',(⎕UCS 13),'the classes and non based classed before based classes in order to',(⎕UCS 13),'fix classes with success. But :Included namespaces outside the class',(⎕UCS 13),'being fixed can sometimes be impossible to find without a detailed ',(⎕UCS 13),'study of the source (e.g. class C in namespace A will be fixed before',(⎕UCS 13),'its included namespace #.X.N).',(⎕UCS 13 13),'  If that happens the status window (if enabled) will display a reason',(⎕UCS 13),'why the ⎕FIX failed and the code will store the source  in a ⍙ variable',(⎕UCS 13),'nearby.',(⎕UCS 13 13),'  To successfully bring in all the code it may then be necessary to',(⎕UCS 13),'repeat the operation with /replace until all the pieces are in. ',(⎕UCS 13),'Using the example above, class #.A.C won''t be fixed but #.X.N will be',(⎕UCS 13),'and doing',(⎕UCS 13),'  ]inx same\location.xdw -replace',(⎕UCS 13),'again will fix C without problem now that its included namespace exists.',(⎕UCS 13),'The ⍙ variable will remain in the ws though. Simply ⎕ex it.  ',(⎕UCS 13 13 13),'NARS workspaces',(⎕UCS 13 13),'  In 2012 was added the ability to bring in NARS workspaces without',(⎕UCS 13),'translation. To use it call #.xfr.nars.makeWS with the name of the file ',(⎕UCS 13),'containing the workspace.',(⎕UCS 13 13 13),'HISTORY',(⎕UCS 13 13),'  This code started life as an APL/PC workspace in the early',(⎕UCS 13),'80''s. It has gone through extensive changes over the years. The',(⎕UCS 13),'original workspaces did not have switches but they are still available',(⎕UCS 13),'with the format unmodified. In 2003 was included APLX and adopted ⎕CR as',(⎕UCS 13),'the standard for program representation. In 2008 APL2 was included. In 2012',(⎕UCS 13),'NARS was added in read only mode.',(⎕UCS 13 13),'DanB 2009',(⎕UCS 13)
