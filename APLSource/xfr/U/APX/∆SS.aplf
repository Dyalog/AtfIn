 r←{opt}∆SS arg;text;from;to;type;flags;fix;⎕IO;norm;⎕ML;add1;search;io
⍝ Mimic APLX' ⎕ss function
⍝ arg is a 2 (search) or 3 (replace) element
 :If 900⌶0 ⋄ opt←0 ⋄ :EndIf  ⍝ simple search
 (type flags)←2↑opt,4        ⍝ advance by 1 after search

 (text from to)←3↑arg,0
 fix←⊢
 :If norm←type=0  ⍝ turn regex meta char x into \x
     fix←'{}[]()\^$|.?*+'∘{(⍵,b/'\')[⍋⍋b←≠\b/⍨1+b←⍵∊⍺]}
 :EndIf
 type←0,norm↓1    ⍝ return also length for regex
 add1←(⍴type)⍴1 0 ⍝ for ⎕IO adjustment later
 :If 1=≡,from ⋄ from←fix from
 :Else ⋄ from←fix¨from ⋄ type,←3 ⍝ show pattern number too
     add1,←1
 :EndIf

 ⎕IO←0 ⋄ ⎕ML←1
 :If search←to≡0
     fix←from ⎕S type
 :Else
     fix←from ⎕R to
 :EndIf
 :If flags>0
     flags←⌽(9⍴2)⊤flags        ⍝ case insensitive?
     fix←fix ⎕OPT(0⊃flags)
     fix←fix ⎕OPT'ML'(1⊃flags) ⍝ stop after 1st
     :If search
         fix←fix ⎕OPT'OM'(2⊃flags) ⍝ advance by 1?
     :EndIf
     fix←fix ⎕OPT'Mode'(0⊃flags[3]⌽'LM') ⍝ Line or Mixed mode?
 :AndIf 1=1↑type
     fix←fix ⎕OPT'DotAll'(4⊃flags) ⍝ . matches all?
         ⍝ Return all matches for multiple searches are ignored
     fix←fix ⎕OPT'EOL'((flags[6 7]⍳1)⊃'CR' 'LF' 'CRLF')
 :EndIf

 r←↑fix text
    ⍝ We need to adjust for the caller's ⎕IO
 :If search
     :If ⎕THIS=1⍴⎕RSI ⋄ io←1↑3⊃⎕STATE'⎕io'
     :Else ⋄ io←⎕RSI[1].⎕IO
     :EndIf
     r←r+(⍴r)⍴add1∧io
 :EndIf
